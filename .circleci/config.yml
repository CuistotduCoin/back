version: 2
jobs:
  deploy-back-prod:
    docker:
      - image: circleci/node:8.10
    environment:
      GOPATH: /home/circleci/go
      AWS_CONFIG_PATH: /home/circleci/.aws
    steps:
      - checkout
      - restore_cache: &restore_back_cache
          key: dependency-cache-{{ checksum "backend/yarn.lock" }}
      - run: &build_aws_config
          name: Build AWS config
          command: |
            sudo mkdir $AWS_CONFIG_PATH
            sudo AWS_CONFIG_PATH=$AWS_CONFIG_PATH AWS_CROSS_ACCOUNT_ID=$AWS_CROSS_ACCOUNT_ID STAGE=$STAGE AWS_MASTER_ACCESS_KEY_ID=$AWS_MASTER_ACCESS_KEY_ID AWS_MASTER_SECRET_ACCESS_KEY=$AWS_MASTER_SECRET_ACCESS_KEY node build_aws_profile
      - run: &install_back_dependencies
          name: Install dependencies
          command: |
            yarn global add serverless
            yarn install
      - save_cache: &save_back_cache
          key: dependency-cache-{{ checksum "backend/yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Build env
          command: |
            yarn create-env
      - run:
          name: Migrate backend
          command: |
            yarn migrate
      - run:
          name: Deploy backend
          command: |
            yarn deploy

  deploy-back-stage:
    docker:
      - image: circleci/node:8.10
    environment:
      GOPATH: /home/circleci/go
      AWS_CONFIG_PATH: /home/circleci/.aws
    steps:
      - checkout
      - restore_cache: *restore_back_cache
      - run: *build_aws_config
      - run: *install_back_dependencies
      - save_cache: *save_back_cache
      - run:
          name: Build env
          command: |
            yarn create-env
      - run:
          name: Migrate backend
          command: |
            yarn migrate
      - run:
          name: Deploy backend
          command: |
            yarn deploy

workflows:
  version: 2
  deploy:
    jobs:
      - deploy-back-prod:
          context: production
          filters:
            branches:
              only:
                - master
      - deploy-back-stage:
          context: staging
          filters:
            branches:
              only: /release-.+/
